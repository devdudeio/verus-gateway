openapi: 3.0.3
info:
  title: Verus Gateway API
  description: |
    A high-performance HTTP gateway for accessing files stored on the Verus blockchain.

    ## Features
    - Multi-chain support (VRSC, VRSCTEST, PBaaS chains)
    - File retrieval with optional encryption (viewing keys)
    - Built-in caching for high performance
    - Comprehensive metrics and health checks

    ## Chain-Based Routing
    All file endpoints require the chain to be specified in the URL path using `/c/{chain}/` prefix.

    Supported chains:
    - `vrsc` - Verus mainnet
    - `vrsctest` - Verus testnet
    - Any configured PBaaS chain

    ## Authentication
    Currently, no authentication is required for public endpoints.
    Admin endpoints may require authentication in production deployments.

    ## Rate Limiting
    Rate limiting should be configured at the infrastructure level for production deployments.
  version: 1.0.0
  contact:
    name: Verus Gateway Support
    url: https://github.com/devdudeio/verus-gateway
  license:
    name: MIT
    url: https://github.com/devdudeio/verus-gateway/blob/main/LICENSE

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://gateway.example.com
    description: Production server

tags:
  - name: Files
    description: File retrieval endpoints
  - name: Health
    description: Health check and readiness endpoints
  - name: Admin
    description: Administrative endpoints (cache, metrics)

paths:
  # File Endpoints
  /c/{chain}/file/{txid_or_filename}:
    get:
      tags:
        - Files
      summary: Get file by TXID or filename
      description: |
        Retrieve a file from the specified blockchain.

        **Two retrieval modes:**
        1. **By TXID**: If path parameter is a 64-character hex string, it's treated as a TXID
        2. **By Filename**: Otherwise, it's treated as a filename (requires `txid` query parameter)
      operationId: getFile
      parameters:
        - $ref: '#/components/parameters/Chain'
        - name: txid_or_filename
          in: path
          required: true
          description: Either a TXID (64 hex chars) or filename
          schema:
            type: string
          examples:
            txid:
              summary: TXID (64 hex characters)
              value: 004b2d1e74351bf361f2555e4254481a3aee9f5db173ff2eeff07e6ae540ba47
            filename:
              summary: Filename
              value: document.pdf
        - name: txid
          in: query
          required: false
          description: Transaction ID (required when using filename mode)
          schema:
            type: string
            pattern: '^[a-f0-9]{64}$'
          example: 004b2d1e74351bf361f2555e4254481a3aee9f5db173ff2eeff07e6ae540ba47
        - $ref: '#/components/parameters/EvkQuery'
      responses:
        '200':
          $ref: '#/components/responses/FileContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

    head:
      tags:
        - Files
      summary: Check file existence
      description: Check if a file exists on the blockchain without downloading it
      operationId: headFile
      parameters:
        - $ref: '#/components/parameters/Chain'
        - name: txid_or_filename
          in: path
          required: true
          description: Either a TXID (64 hex chars) or filename
          schema:
            type: string
        - name: txid
          in: query
          required: false
          description: Transaction ID (required when using filename mode)
          schema:
            type: string
            pattern: '^[a-f0-9]{64}$'
        - $ref: '#/components/parameters/EvkQuery'
      responses:
        '200':
          description: File exists
          headers:
            Content-Type:
              $ref: '#/components/headers/ContentType'
            Content-Length:
              $ref: '#/components/headers/ContentLength'
            Content-Disposition:
              $ref: '#/components/headers/ContentDisposition'
            X-Request-ID:
              $ref: '#/components/headers/XRequestID'
            X-Cache-Status:
              $ref: '#/components/headers/XCacheStatus'
        '404':
          description: File not found
        '500':
          description: Internal server error

  /c/{chain}/meta/{txid}:
    get:
      tags:
        - Files
      summary: Get file metadata
      description: Retrieve metadata for a file without downloading the content
      operationId: getMeta
      parameters:
        - $ref: '#/components/parameters/Chain'
        - $ref: '#/components/parameters/TxidPath'
        - $ref: '#/components/parameters/EvkQuery'
      responses:
        '200':
          description: File metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileMetadata'
              example:
                txid: 004b2d1e74351bf361f2555e4254481a3aee9f5db173ff2eeff07e6ae540ba47
                chain: vrsctest
                filename: lee.gif
                size: 102400
                content_type: image/gif
                extension: gif
                compressed: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # Health Endpoints
  /health:
    get:
      tags:
        - Health
      summary: Health check (liveness probe)
      description: Returns OK if the gateway is running
      operationId: health
      responses:
        '200':
          description: Gateway is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  version:
                    type: string
                    example: 1.0.0

  /ready:
    get:
      tags:
        - Health
      summary: Readiness check
      description: Returns OK if the gateway can connect to at least one Verus node
      operationId: ready
      responses:
        '200':
          description: Gateway is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ready
                  version:
                    type: string
                    example: 1.0.0
        '503':
          description: Gateway is not ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: unhealthy
                  reason:
                    type: string
                    example: no healthy chains available

  /chains:
    get:
      tags:
        - Health
      summary: List available chains
      description: Returns a list of configured blockchain networks
      operationId: listChains
      responses:
        '200':
          description: List of chains
          content:
            application/json:
              schema:
                type: object
                properties:
                  chains:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: vrsctest
                        name:
                          type: string
                          example: Verus Testnet
                        enabled:
                          type: boolean
                          example: true
                  default:
                    type: string
                    example: vrsctest
              example:
                chains:
                  - id: vrsc
                    name: Verus Mainnet
                    enabled: true
                  - id: vrsctest
                    name: Verus Testnet
                    enabled: true
                default: vrsctest

  # Admin Endpoints
  /metrics:
    get:
      tags:
        - Admin
      summary: Prometheus metrics
      description: Returns Prometheus-formatted metrics
      operationId: metrics
      responses:
        '200':
          description: Prometheus metrics
          content:
            text/plain:
              schema:
                type: string
              example: |
                # HELP verus_gateway_http_requests_total Total HTTP requests
                # TYPE verus_gateway_http_requests_total counter
                verus_gateway_http_requests_total{method="GET",path="/c/vrsctest/file",status="200"} 42
                # HELP verus_gateway_cache_hits_total Cache hit count
                # TYPE verus_gateway_cache_hits_total counter
                verus_gateway_cache_hits_total 1234

  /admin/cache/stats:
    get:
      tags:
        - Admin
      summary: Get cache statistics
      description: Returns current cache usage statistics
      operationId: getCacheStats
      responses:
        '200':
          description: Cache statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  hits:
                    type: integer
                    example: 1234
                  misses:
                    type: integer
                    example: 56
                  size:
                    type: integer
                    description: Total cache size in bytes
                    example: 10485760
                  items:
                    type: integer
                    description: Number of cached items
                    example: 42
        '500':
          $ref: '#/components/responses/InternalError'

  /admin/cache:
    delete:
      tags:
        - Admin
      summary: Clear entire cache
      description: Removes all entries from the cache
      operationId: clearCache
      responses:
        '200':
          description: Cache cleared
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: cache cleared successfully
        '500':
          $ref: '#/components/responses/InternalError'

  /admin/cache/{key}:
    delete:
      tags:
        - Admin
      summary: Delete cache entry
      description: Removes a specific entry from the cache
      operationId: deleteCacheEntry
      parameters:
        - name: key
          in: path
          required: true
          description: Cache key to delete (format: chain:txid or chain:txid:encrypted)
          schema:
            type: string
          example: vrsctest:004b2d1e74351bf361f2555e4254481a3aee9f5db173ff2eeff07e6ae540ba47
      responses:
        '200':
          description: Cache entry deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: cache entry deleted successfully
        '500':
          $ref: '#/components/responses/InternalError'

components:
  parameters:
    Chain:
      name: chain
      in: path
      required: true
      description: Blockchain network identifier (e.g., vrsctest, vrsc)
      schema:
        type: string
        pattern: '^[a-zA-Z0-9_\-]+$'
      examples:
        testnet:
          summary: Verus Testnet
          value: vrsctest
        mainnet:
          summary: Verus Mainnet
          value: vrsc

    TxidPath:
      name: txid
      in: path
      required: true
      description: Transaction ID containing the file data (64 hex characters)
      schema:
        type: string
        pattern: '^[a-f0-9]{64}$'
      example: 004b2d1e74351bf361f2555e4254481a3aee9f5db173ff2eeff07e6ae540ba47

    EvkQuery:
      name: evk
      in: query
      required: false
      description: Viewing key for encrypted files (starts with 'zxviews')
      schema:
        type: string
        pattern: '^zxviews[a-zA-Z0-9]{90,}$'
        minLength: 95
        maxLength: 500
      example: zxviews1qdugfjmfqyqqpqxv03ees2eymyvvfa8uhhjcfkezhsleu9686l92w6cycx8jazta4metc3lx7jjly7um6vxujtzj2dt7xw8m7gd0suw56pshraqf34s3ltww9tvr049h4j78duw7w7gvkzfmwvk6k00zgpynq8pwr8h9wk0f47v5cjaczq9y3dndtcsntszt5rl2qsage9dc7ctuevhnvhynex44fnqy0wde3xppuzp2qfdg3tgnp2sn6pajxjfqy355eutvdgsl77sddcuep

  headers:
    ContentType:
      description: MIME type of the file
      schema:
        type: string
      examples:
        pdf:
          summary: PDF document
          value: application/pdf
        image:
          summary: JPEG image
          value: image/jpeg
        gif:
          summary: GIF image
          value: image/gif

    ContentLength:
      description: File size in bytes
      schema:
        type: integer
      example: 1024000

    ContentDisposition:
      description: Suggested filename for download
      schema:
        type: string
      example: attachment; filename="document.pdf"

    XRequestID:
      description: Unique request identifier for tracing
      schema:
        type: string
        format: uuid
      example: 550e8400-e29b-41d4-a716-446655440000

    XCacheStatus:
      description: Cache hit or miss status
      schema:
        type: string
        enum: [HIT, MISS]
      example: HIT

  schemas:
    FileMetadata:
      type: object
      properties:
        txid:
          type: string
          description: Transaction ID
          example: 004b2d1e74351bf361f2555e4254481a3aee9f5db173ff2eeff07e6ae540ba47
        chain:
          type: string
          description: Chain identifier
          example: vrsctest
        filename:
          type: string
          description: Original filename
          example: document.pdf
        size:
          type: integer
          description: File size in bytes
          example: 102400
        content_type:
          type: string
          description: MIME type
          example: application/pdf
        extension:
          type: string
          description: File extension (without dot)
          example: pdf
        compressed:
          type: boolean
          description: Whether the file is gzip-compressed
          example: false

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Machine-readable error code
          enum:
            - invalid_request
            - file_not_found
            - decryption_failed
            - chain_not_found
            - internal_error
          example: file_not_found
        message:
          type: string
          description: Human-readable error message
          example: File not found on the blockchain
        request_id:
          type: string
          format: uuid
          description: Request ID for debugging
          example: 550e8400-e29b-41d4-a716-446655440000

  responses:
    FileContent:
      description: File content with appropriate headers
      headers:
        Content-Type:
          $ref: '#/components/headers/ContentType'
        Content-Length:
          $ref: '#/components/headers/ContentLength'
        Content-Disposition:
          $ref: '#/components/headers/ContentDisposition'
        X-Request-ID:
          $ref: '#/components/headers/XRequestID'
        X-Cache-Status:
          $ref: '#/components/headers/XCacheStatus'
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary

    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: invalid_request
            message: Missing required parameter txid
            request_id: 550e8400-e29b-41d4-a716-446655440000

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: file_not_found
            message: File not found on the blockchain
            request_id: 550e8400-e29b-41d4-a716-446655440000

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: internal_error
            message: An internal error occurred
            request_id: 550e8400-e29b-41d4-a716-446655440000
